provider "aws" {
  region = "us-east-1"  # Replace with your preferred region
}

# VPC with the CIDR block 192.168.0.0/22
resource "aws_vpc" "my_vpc" {
  cidr_block = "192.168.0.0/22"
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = "MyVPC"
  }
}

# Create a Subnet within the VPC
resource "aws_subnet" "my_subnet" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "192.168.0.0/24"  # Example subnet CIDR block within the VPC
  availability_zone       = "us-east-1a"       # Change according to your region
  map_public_ip_on_launch = true
  tags = {
    Name = "MySubnet"
  }
}

# Create an S3 Bucket
resource "aws_s3_bucket" "my_bucket" {
  bucket = "my-terraform-bucket-unique-name"  # Use a globally unique name for the S3 bucket
  acl    = "private"
}

# IAM Role for EC2 with S3 Bucket Access Policy
resource "aws_iam_role" "ec2_s3_role" {
  name               = "EC2S3AccessRole"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action    = "sts:AssumeRole"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
        Effect    = "Allow"
        Sid       = ""
      },
    ]
  })
}

# IAM Policy that grants EC2 access to the S3 bucket
resource "aws_iam_policy" "s3_access_policy" {
  name        = "EC2S3AccessPolicy"
  description = "Policy to allow EC2 instances to access the S3 bucket"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = "s3:*"
        Effect   = "Allow"
        Resource = "${aws_s3_bucket.my_bucket.arn}/*"
      },
    ]
  })
}

# Attach the Policy to the EC2 Role
resource "aws_iam_role_policy_attachment" "ec2_s3_policy_attachment" {
  role       = aws_iam_role.ec2_s3_role.name
  policy_arn = aws_iam_policy.s3_access_policy.arn
}

# Security Group for the EC2 instance
resource "aws_security_group" "ec2_sg" {
  name        = "my-ec2-security-group"
  description = "Allow SSH and HTTP access"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# EC2 Instance with the IAM Role
resource "aws_instance" "my_ec2" {
  ami           = "ami-0c55b159cbfafe1f0"  # Use a valid AMI ID for your region
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.my_subnet.id
  security_group_ids = [aws_security_group.ec2_sg.id]

  iam_instance_profile = aws_iam_role.ec2_s3_role.name

  tags = {
    Name = "MyEC2Instance"
  }

  key_name = "my-key-pair"  # Ensure you have a valid key pair for SSH access
}

output "s3_bucket_name" {
  value = aws_s3_bucket.my_bucket.bucket
}

output "ec2_public_ip" {
  value = aws_instance.my_ec2.public_ip
}
